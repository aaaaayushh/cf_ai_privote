/**
 * Export Functionality
 * Handles exporting meetings to various formats
 */

import { showStatus } from "./ui.js";

/**
 * Export meeting as Markdown
 * @param {Object} meeting - Meeting object
 */
export function exportMeetingAsMarkdown(meeting) {
  try {
    const actionItems = meeting.action_items
      .split("\n")
      .filter((item) => item.trim())
      .map((item) => item.replace(/^[â€¢\-*]\s*/, "").trim())
      .filter((item) => item.length > 0);

    const markdown = `# ${meeting.title}

**Date:** ${new Date(meeting.meeting_date).toLocaleDateString()}  
**Time:** ${meeting.meeting_time}

## Summary

${meeting.summary}

## Action Items

${
  actionItems.length > 0
    ? actionItems.map((item) => `- ${item}`).join("\n")
    : "- No action items identified"
}

## Transcript

${meeting.transcript}

---

*Generated by Privote on ${new Date().toLocaleString()}*
`;

    const blob = new Blob([markdown], {
      type: "text/markdown;charset=utf-8",
    });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;

    const safeTitle = meeting.title
      .replace(/[^a-z0-9\s]/gi, "")
      .replace(/\s+/g, "_")
      .toLowerCase();
    const filename = `${safeTitle}_${meeting.meeting_date}.md`;
    a.download = filename;

    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    setTimeout(() => {
      URL.revokeObjectURL(url);
    }, 100);

    showStatus("Meeting exported as Markdown", "success");
  } catch (error) {
    console.error("Error exporting markdown:", error);
    showStatus("Error exporting meeting: " + error.message, "error");
  }
}
